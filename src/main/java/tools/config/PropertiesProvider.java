package tools.config;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.util.Properties;
import ui.Printer;

/**
 * Provides manipulation with key-value pairs. These pairs are stored in text file. Gives ability
 * to set pairs and to search for value for given key.
 */
public class PropertiesProvider {
/*=================================================================================================
                                                Attributess
=================================================================================================*/
  private final File configFile;
  private final String PROPERTIES_COMMENT = """
      This file is automatically generated configuration file.
      Do not modify keys it may corrupt appplication.""";
/*=================================================================================================
                                                Constructors
=================================================================================================*/
  public PropertiesProvider(File configFile) {
    this.configFile = configFile;
  }
/*=================================================================================================
                                                Methods
=================================================================================================*/
  /**
   * Returns value from properties file for given key, if the key exists. In case key not exists
   * then returns null.
   * @param key key for which value should be returned
   * @return String with value apropriate for given key, if there is no such key returns null.
   */
  public String getProperty(String key) {
    Properties properties = new Properties();
    try (FileInputStream fileInputStream = getFileInputStream(configFile)) {
      loadProperties(properties, fileInputStream);
    } catch (NullPointerException e) {
      return "";
    } catch (IOException e) {
      return "";
    }
    return properties.getProperty(key);
  }

  protected FileInputStream getFileInputStream(File configFile) throws IOException {
    return new FileInputStream(configFile);
  }

  protected void loadProperties(Properties prop, FileInputStream inputStream) throws IOException {
    prop.load(inputStream);
  }

  /**
   * Create or update key-value pair. Create new pair if given key not exists. Update value
   * for already existing key.
   * @param key key
   * @param value value for the key.
   */
  public void setProperty(String key, String value) {
    Properties properties = new Properties();
    try (FileInputStream inputStream = getFileInputStream(configFile)) {
      loadProperties(properties, inputStream);
    } catch (NullPointerException e) {
      Printer.printCannotSetPropertyBadFile();
      return;
    } catch (IOException e) {
      Printer.printCannotSetPropertyBadFile();
      return;
    }
    try (OutputStream outputStream = getOutputStream()) {
      properties.setProperty(key, value);
      properties.store(outputStream, PROPERTIES_COMMENT);
    } catch (IOException e) {
      Printer.printCannotSetPropertyBadFile();
    }
  }

  protected FileOutputStream getOutputStream() throws IOException {
    return new FileOutputStream(configFile);
  }
}
